-- Drop tables if they exist
DROP TABLE IF EXISTS FactTable;
DROP TABLE IF EXISTS ProductTable;
DROP TABLE IF EXISTS LocationTable;

-- Creating LocationTable
CREATE TABLE LocationTable (
    AreaCode INT,
    State VARCHAR(100),
    Market VARCHAR(100),
    MarketSize VARCHAR(100)
);

-- Insert sample data into LocationTable
INSERT INTO LocationTable (AreaCode, State, Market, MarketSize) VALUES
(719, 'Colorado', 'Market1', 'Large'),
(408, 'California', 'Market2', 'Medium'),
(512, 'Texas', 'Market3', 'Small');

-- Creating ProductTable
CREATE TABLE ProductTable (
    ProductType VARCHAR(100),
    Product VARCHAR(100),
    ProductID INT,
    Type VARCHAR(100)
);

-- Insert sample data into ProductTable
INSERT INTO ProductTable (ProductType, Product, ProductID, Type) VALUES
('coffee', 'Coffee Product1', 1, 'regular'),
('tea', 'Tea Product2', 2, 'regular'),
('juice', 'Juice Product3', 3, 'irregular');

-- Creating FactTable
CREATE TABLE FactTable (
    Date DATE,
    ProductID INT,
    Profit DECIMAL(10, 2),
    Sales DECIMAL(10, 2),
    Margin DECIMAL(10, 2),
    COGS DECIMAL(10, 2),
    TotalExpenses DECIMAL(10, 2),
    Marketing DECIMAL(10, 2),
    Inventory DECIMAL(10, 2),
    BudgetProfit DECIMAL(10, 2),
    BudgetCOGS DECIMAL(10, 2),
    BudgetMargin DECIMAL(10, 2),
    BudgetSales DECIMAL(10, 2),
    AreaCode INT
);

-- Insert sample data into FactTable
INSERT INTO FactTable (Date, ProductID, Profit, Sales, Margin, COGS, TotalExpenses, Marketing, Inventory, BudgetProfit, BudgetCOGS, BudgetMargin, BudgetSales, AreaCode) VALUES
('2010-01-01', 1, 100.00, 200.00, 50.00, 100.00, 40.00, 10.00, 500.00, 150.00, 60.00, 70.00, 250.00, 719),
('2010-01-02', 2, 150.00, 250.00, 60.00, 110.00, 50.00, 15.00, 600.00, 160.00, 70.00, 80.00, 270.00, 408),
('2010-01-03', 3, 200.00, 300.00, 70.00, 120.00, 60.00, 20.00, 700.00, 170.00, 80.00, 90.00, 300.00, 512);

-- 1. Display the number of states present in the LocationTable.
SELECT COUNT(DISTINCT State) AS NumberOfStates
FROM LocationTable;

-- 2. How many products are of regular type?
SELECT COUNT(*) AS NumberOfRegularProducts
FROM ProductTable
WHERE Type = 'regular';

-- 3. How much spending has been done on marketing of product ID 1?
SELECT SUM(Marketing) AS TotalMarketingSpent
FROM FactTable
WHERE ProductID = 1;

-- 4. What is the minimum sales of a product?
SELECT MIN(Sales) AS MinimumSales
FROM FactTable;

-- 5. Display the max Cost of Goods Sold (COGS).
SELECT MAX(COGS) AS MaxCOGS
FROM FactTable;

-- 6. Display the details of the product where product type is coffee.
SELECT *
FROM ProductTable
WHERE ProductType = 'coffee';

-- 7. Display the details where total expenses are greater than 40.
SELECT *
FROM FactTable
WHERE TotalExpenses > 40;

-- 8. What is the average sales in area code 719?
SELECT AVG(Sales) AS AverageSales
FROM FactTable
WHERE AreaCode = 719;

-- 9. Find out the total profit generated by Colorado state.
SELECT SUM(Profit) AS TotalProfit
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
WHERE l.State = 'Colorado';

-- 10. Display the average inventory for each product ID.
SELECT ProductID, AVG(Inventory) AS AverageInventory
FROM FactTable
GROUP BY ProductID;

-- 11. Display state in a sequential order in the Location Table.
SELECT State
FROM LocationTable
ORDER BY State;

-- 12. Display the average budget of the Product where the average budget margin should be greater than 100.
SELECT ProductID, AVG(BudgetMargin) AS AverageBudgetMargin
FROM FactTable
GROUP BY ProductID
HAVING AVG(BudgetMargin) > 100;

-- 13. What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS TotalSales
FROM FactTable
WHERE Date = '2010-01-01';

-- 14. Display the average total expense of each product ID on an individual date.
SELECT Date, ProductID, AVG(TotalExpenses) AS AverageTotalExpense
FROM FactTable
GROUP BY Date, ProductID;

-- 15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
SELECT f.Date, f.ProductID, p.ProductType, p.Product, f.Sales, f.Profit, l.State, f.AreaCode
FROM FactTable f
JOIN ProductTable p ON f.ProductID = p.ProductID
JOIN LocationTable l ON f.AreaCode = l.AreaCode;

-- 16. Display the rank without any gap to show the sales wise rank.
SELECT Date, ProductID, Sales,
       DENSE_RANK() OVER (ORDER BY Sales DESC) AS SalesRank
FROM FactTable;

-- 17. Find the state wise profit and sales.
SELECT l.State, SUM(f.Profit) AS TotalProfit, SUM(f.Sales) AS TotalSales
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
GROUP BY l.State;

-- 18. Find the state wise profit and sales along with the product name.
SELECT l.State, p.Product, SUM(f.Profit) AS TotalProfit, SUM(f.Sales) AS TotalSales
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
JOIN ProductTable p ON f.ProductID = p.ProductID
GROUP BY l.State, p.Product;

-- 19. If there is an increase in sales of 5%, calculate the increased sales.
SELECT ProductID, Sales, Sales * 1.05 AS IncreasedSales
FROM FactTable;

-- 20. Find the maximum profit along with the product ID and product type.
SELECT ProductID, ProductType, MAX(Profit) AS MaxProfit
FROM FactTable f
JOIN ProductTable p ON f.ProductID = p.ProductID
GROUP BY ProductID, ProductType;

-- 21. Create a stored procedure to fetch the result according to the product type from Product Table.
DELIMITER $$
CREATE PROCEDURE GetProductsByType(IN p_type VARCHAR(50))
BEGIN
    SELECT * FROM ProductTable WHERE ProductType = p_type;
END$$
DELIMITER ;

-- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
SELECT Date, ProductID, 
       CASE 
           WHEN TotalExpenses < 60 THEN 'Profit'
           ELSE 'Loss'
       END AS ProfitOrLoss
FROM FactTable;

-- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
SELECT YEAR(Date) AS Year, WEEK(Date) AS Week, ProductID, SUM(Sales) AS WeeklySales
FROM FactTable
GROUP BY YEAR(Date), WEEK(Date), ProductID WITH ROLLUP;

-- 24. Apply union and intersection operator on the tables which consist of attribute area code.
-- Assuming we want to find area codes that are either in FactTable or LocationTable and area codes that are in both.
-- Union
SELECT AreaCode FROM FactTable
UNION
SELECT AreaCode FROM LocationTable;

-- Intersection
SELECT AreaCode FROM FactTable
INTERSECT
SELECT AreaCode FROM LocationTable;

-- 25. Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference.
DELIMITER $$
CREATE FUNCTION GetProductByType(p_type VARCHAR(50))
RETURNS TABLE
RETURN
    SELECT * FROM ProductTable WHERE ProductType = p_type;
$$
DELIMITER ;

-- 26. Change the product type from coffee to tea where product ID is 1 and undo it.
UPDATE ProductTable
SET ProductType = 'tea'
WHERE ProductID = 1;

-- Undo the change
UPDATE ProductTable
SET ProductType = 'coffee'
WHERE ProductID = 1;

-- 27. Display the date, product ID and sales where total expenses are between 100 to 200.
SELECT Date, ProductID, Sales
FROM FactTable
WHERE TotalExpenses BETWEEN 100 AND 200;

-- 28. Delete the records in the Product Table for regular type.
DELETE FROM ProductTable
WHERE Type = 'regular';

-- 29. Display the ASCII value of the fifth character from the column Product.
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS AsciiValue
FROM ProductTable;